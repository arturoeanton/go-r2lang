name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run tests
      run: go test -v -race -timeout=5m -coverprofile=coverage.out ./pkg/...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        echo "Coverage report:"
        go tool cover -func=coverage.out | tail -1

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  integration:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build R2Lang
      run: go build -o r2lang main.go

    - name: Test simple R2Lang examples
      timeout-minutes: 5
      run: |
        # Test basic examples that don't use goroutines
        examples_to_test=(
          "examples/example1-if.r2"
          "examples/example2-while.r2"
          "examples/example3-for.r2"
          "examples/example4-func.r2"
          "examples/example5-obj.r2"
          "examples/example7-std.r2"
          "examples/example10-string.r2"
          "examples/example11-math.r2"
          "examples/example12-rand.r2"
          "examples/example22-array.r2"
        )
        
        for example in "${examples_to_test[@]}"; do
          if [[ -f "$example" ]]; then
            echo "Testing $example..."
            timeout 10s ./r2lang "$example" || echo "Example $example failed or timed out"
          else
            echo "Example $example not found, skipping"
          fi
        done

    - name: Test main.r2
      timeout-minutes: 2
      run: |
        echo "Testing main.r2..."
        timeout 10s ./r2lang main.r2 || echo "main.r2 failed or timed out"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif