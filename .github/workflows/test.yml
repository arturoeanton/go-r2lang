name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    env:
      GOTOOLCHAIN: local

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true 

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run tests
      run: go test -v -race -timeout=5m -coverprofile=coverage.out ./pkg/...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        echo "Coverage report:"
        go tool cover -func=coverage.out | tail -1

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'  # Usar Go 1.22 para evitar problemas con 1.23

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Basic Go checks
      run: |
        # Verificar formato
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted. Run 'gofmt -w .'"
          gofmt -s -l .
          exit 1
        fi
        
        # Verificar que compila
        go build -v ./...
        
        # Verificar imports
        if command -v goimports &> /dev/null; then
          goimports -l .
        fi

    - name: golangci-lint (optional)
      uses: golangci/golangci-lint-action@v4
      with:
        #version: v1.54.2  # Versión más estable
        version: v1.57.2 
        args: --timeout=3m --disable=typecheck
      continue-on-error: true

  integration:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build R2Lang
      run: go build -o r2lang main.go

    - name: Test simple R2Lang examples
      timeout-minutes: 5
      run: |
        # Test basic examples that don't use goroutines
        examples_to_test=(
          "examples/example1-if.r2"
          "examples/example2-while.r2"
          "examples/example3-for.r2"
          "examples/example4-func.r2"
          "examples/example5-obj.r2"
          "examples/example7-std.r2"
          "examples/example10-string.r2"
          "examples/example11-math.r2"
          "examples/example12-rand.r2"
          "examples/example22-array.r2"
        )
        
        for example in "${examples_to_test[@]}"; do
          if [[ -f "$example" ]]; then
            echo "Testing $example..."
            timeout 10s ./r2lang "$example" || echo "Example $example failed or timed out"
          else
            echo "Example $example not found, skipping"
          fi
        done

    - name: Test main.r2
      timeout-minutes: 2
      run: |
        echo "Testing main.r2..."
        timeout 10s ./r2lang main.r2 || echo "main.r2 failed or timed out"

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Download dependencies
      run: go mod download

    - name: Basic security checks
      run: |
        echo "Running basic security checks..."
        
        # Verificar que no hay credenciales hardcodeadas
        if grep -r -i "password\|secret\|key\|token" --include="*.go" . | grep -v "test" | head -5; then
          echo "Warning: Potential hardcoded credentials found"
        fi
        
        # Verificar imports seguros
        echo "Checking for unsafe imports..."
        if grep -r "unsafe" --include="*.go" . | head -5; then
          echo "Warning: Unsafe package usage found"
        fi
        
        echo "Basic security check completed"

    - name: Run gosec (if available)
      run: |
        # Intentar instalar gosec
        if go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest; then
          echo "gosec installed successfully"
          if command -v gosec &> /dev/null; then
            gosec -fmt json -out gosec-results.json ./... || echo "gosec completed with findings"
            echo "Security scan completed"
          fi
        else
          echo "Could not install gosec, skipping detailed security scan"
        fi
      continue-on-error: true