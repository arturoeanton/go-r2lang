// Sistema Contable LATAM - Servidor Web Funcional
// Demo R2Lang DSL para Siigo ERP con servidor HTTP real

console.log("========================================")
console.log("  SISTEMA CONTABLE LATAM - R2LANG DSL")
console.log("========================================")
console.log("  Demo Web para Siigo ERP Localization")
console.log("  Regiones: MX, COL, AR, CH, UY, EC, PE")
console.log("========================================")
console.log("")

// Importar servidor API funcional
import "src/api_server_working.r2" as apiserver

// Importar base de datos simple
import "database/database_simple.r2" as database

// Configuraci√≥n de la aplicaci√≥n
let appConfig = {
    name: "Sistema Contable LATAM",
    version: "1.0.0",
    description: "Demo R2Lang DSL para localizaci√≥n ERP",
    author: "R2Lang Team",
    target: "Siigo ERP",
    demo_mode: true,
    port: 8080,
    supported_regions: ["MX", "COL", "AR", "CH", "UY", "EC", "PE"]
}

// Funci√≥n principal
func main() {
    console.log("üöÄ Iniciando " + appConfig.name + " v" + appConfig.version)
    console.log("üéØ Objetivo: " + appConfig.target)
    console.log("")
    
    startWebApplication()
}

// Iniciar aplicaci√≥n web completa
func startWebApplication() {
    console.log("üåê INICIANDO APLICACI√ìN WEB COMPLETA")
    console.log("===================================")
    console.log("")
    
    try {
        // Paso 1: Inicializar base de datos
        console.log("üìä Paso 1/3: Inicializando base de datos...")
        database.initDatabase()
        console.log("   ‚úÖ Base de datos lista")
        console.log("")
        
        // Paso 2: Test DSL engines
        console.log("üîß Paso 2/3: Verificando motores DSL...")
        apiserver.testAPIs()
        console.log("   ‚úÖ Motores DSL operativos")
        console.log("")
        
        // Paso 3: Iniciar servidor web
        console.log("üöÄ Paso 3/3: Iniciando servidor web...")
        console.log("")
        showWelcomeInfo()
        
        // Ejecutar servidor (esto bloquea el hilo principal)
        apiserver.startServer()
        
    } catch (error) {
        console.log("‚ùå ERROR iniciando aplicaci√≥n: " + error)
        console.log("")
        runFallbackDemo()
    }
}

// Mostrar informaci√≥n de bienvenida
func showWelcomeInfo() {
    console.log("üìã INFORMACI√ìN DE LA APLICACI√ìN WEB")
    console.log("==================================")
    console.log("Aplicaci√≥n: " + appConfig.name)
    console.log("Versi√≥n: " + appConfig.version)
    console.log("Puerto: " + appConfig.port)
    console.log("Modo: Demo para " + appConfig.target)
    console.log("")
    console.log("üåé REGIONES LATAM SOPORTADAS:")
    let i = 0
    while (i < std.len(appConfig.supported_regions)) {
        let region = appConfig.supported_regions[i]
        console.log("   ‚úì " + region + " - " + getRegionName(region))
        i = i + 1
    }
    console.log("")
    console.log("üîß TECNOLOG√çAS:")
    console.log("   ‚Ä¢ R2Lang DSL Engine")
    console.log("   ‚Ä¢ r2http (Servidor Web nativo)")
    console.log("   ‚Ä¢ Almacenamiento en memoria")
    console.log("   ‚Ä¢ HTML5 + JavaScript")
    console.log("")
    console.log("üí° VALUE PROPOSITION PARA SIIGO:")
    console.log("   ‚úÖ Reducci√≥n de 18 meses a 2 meses por pa√≠s")
    console.log("   ‚úÖ Ahorro de $500K a $150K por localizaci√≥n")
    console.log("   ‚úÖ De 7 codebases separados a 1 DSL unificado")
    console.log("   ‚úÖ ROI proyectado: 1,020% en 3 a√±os")
    console.log("")
}

// Obtener nombre de regi√≥n
func getRegionName(code) {
    let names = {
        "MX": "M√©xico",
        "COL": "Colombia", 
        "AR": "Argentina",
        "CH": "Chile",
        "UY": "Uruguay",
        "EC": "Ecuador",
        "PE": "Per√∫"
    }
    return names[code] || code
}

// Demo de fallback en caso de error
func runFallbackDemo() {
    console.log("üîß MODO FALLBACK")
    console.log("================")
    console.log("Servidor web no pudo iniciarse.")
    console.log("Ejecutando demo b√°sico...")
    console.log("")
    
    // Demo b√°sico de DSL
    console.log("üé™ DEMO DSL B√ÅSICO")
    console.log("==================")
    console.log("‚Ä¢ Sistema: " + appConfig.name)
    console.log("‚Ä¢ Versi√≥n: " + appConfig.version)
    console.log("‚Ä¢ Regiones: " + std.len(appConfig.supported_regions))
    console.log("‚Ä¢ Target: " + appConfig.target)
    console.log("")
    
    // Test r√°pido
    try {
        apiserver.runQuickDemo()
    } catch (error) {
        console.log("‚ö†Ô∏è Error en demo b√°sico: " + error)
    }
    
    console.log("")
    console.log("‚úÖ Demo fallback completado")
    console.log("")
    console.log("üí° Sugerencias:")
    console.log("1. Verificar puerto " + appConfig.port + " libre")
    console.log("2. Reintentar: go run main.go examples/proyecto/contable/web_server.r2")
    console.log("3. Usar demo_completo.r2 como alternativa")
}

// Informaci√≥n del sistema
func showSystemInfo() {
    console.log("üìñ INFORMACI√ìN DETALLADA DEL SISTEMA")
    console.log("====================================")
    console.log("Nombre completo: " + appConfig.name)
    console.log("Versi√≥n: " + appConfig.version)
    console.log("Descripci√≥n: " + appConfig.description)
    console.log("Desarrollado por: " + appConfig.author)
    console.log("Cliente objetivo: " + appConfig.target)
    console.log("Modo demo: " + (appConfig.demo_mode ? "ACTIVO" : "INACTIVO"))
    console.log("Puerto HTTP: " + appConfig.port)
    console.log("")
    console.log("üéØ CARACTER√çSTICAS PRINCIPALES:")
    console.log("   ‚Ä¢ Procesamiento autom√°tico de transacciones")
    console.log("   ‚Ä¢ Localizaci√≥n multi-regi√≥n LATAM")
    console.log("   ‚Ä¢ C√°lculo autom√°tico de impuestos por pa√≠s")
    console.log("   ‚Ä¢ Generaci√≥n de asientos contables")
    console.log("   ‚Ä¢ API REST completa")
    console.log("   ‚Ä¢ Cumplimiento normativo por regi√≥n")
    console.log("")
    console.log("üöÄ READY FOR SIIGO DEMO!")
}

// Ejecutar aplicaci√≥n
console.log("üéØ Preparando aplicaci√≥n web...")
main()